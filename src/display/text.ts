
import { Point, Size, Rect, PixelData } from "../shared/types"
import { DisplayFormat, Bitmap } from "./format"
import { TextLoresInterleave, HGR_BLACK_RGB, HGR_WHITE_RGB } from "./tables"

//------------------------------------------------------------------------------

// TODO: possibly add interleave40/80

export function deinterleave40(inData: Uint8Array, outData: PixelData, interleaveTable: number[]) {
  let dstOffset = 0
  for (let y = 0; y < outData.bounds.height; y += 1) {
    const srcOffset = interleaveTable[y]
    for (let x = 0; x < outData.byteWidth; x += 1) {
      outData.bytes[dstOffset + x] = inData[srcOffset + x]
    }
    dstOffset += outData.byteWidth
  }
}

export function deinterleave80(inData: Uint8Array, outData: PixelData, interleaveTable: number[]) {
  let dstOffset = 0
  const halfByteWidth = outData.byteWidth / 2
  const halfInSize = inData.length / 2
  for (let y = 0; y < outData.bounds.height; y += 1) {
    const srcOffset = interleaveTable[y]
    let dstIndex = dstOffset
    for (let x = 0; x < halfByteWidth; x += 1) {
      outData.bytes[dstIndex++] = inData[srcOffset + x]
      outData.bytes[dstIndex++] = inData[srcOffset + x + halfInSize]
    }
    dstOffset += outData.byteWidth
  }
}

//------------------------------------------------------------------------------

export class Text40Format extends DisplayFormat {

  public get name(): string {
    return "text40"
  }

  public get frameSize(): Size {
    return { width: 40, height: 24 }
  }

  public get displaySize(): Size {
    return { width: 560, height: 384 }
  }

  public get pixelScale(): Point {
    return { x: 14, y: 16 }
  }

  public get alignment(): Point {
    return { x: 0, y: 0 }
  }

  public calcPixelWidth(byteWidth: number) {
    return byteWidth
  }

  public calcByteWidth(pixelX: number, pixelWidth: number) {
    return pixelWidth
  }

  public calcAddress(pixelX: number, pixelY: number, pageIndex: number): number {
    return 0x0400 + pageIndex * 0x0400 + TextLoresInterleave[pixelY] + pixelX
  }

  public calcByteColumn(pixelX: number): number {
    return pixelX
  }

  public createFramePixelData(): PixelData {
    return new PixelData(this.name, {x: 0, y: 0, ...this.frameSize}, this.frameSize.width)
  }

  public createBitmap(src: Bitmap | Rect):  Bitmap {
    return new TextBitmap(src, this)
  }

  public get colorCount(): number {
    return 2
  }

  public getColorValueRgb(index: number): number {
    if (index == 0) {
      return 0xff000000
    } else {
      return 0xffffffff
    }
  }

  public getColorPattern(index: number): number[][] {
    if (index == 0) {
      return [[0xA0]]   // space character
    } else {
      return [[0x4E]]   // inverted space character
    }
  }

  public get altModes(): number {
    return 1
  }

  public colorize(srcBitmap: Bitmap, yTop: number, yBot: number, altMode: number, colorBuffer: Uint32Array, colorBufferAlt: Uint32Array) {
    let frameOffset = yTop * srcBitmap.stride
    let colorOffset = yTop * this.pixelScale.y / 2 * this.displaySize.width
    const isWideText = this.pixelScale.x == 14
    for (let y = yTop; y < yBot; y += 1) {
      for (let x = 0; x < this.frameSize.width; x += 1) {
        const charIndex = srcBitmap.data[frameOffset + x]
        const inverted = charIndex < 0x40
        let textOffset = charIndex * 8
        let dstOffset = colorOffset + x * this.pixelScale.x
        for (let yy = 0; yy < 8; yy += 1) {
          const dataByte = A2CharacterRomIIe[textOffset++] ^ 0x7F
          let dstIndex = dstOffset
          let mask = 0x01
          for (let xx = 0; xx < 7; xx += 1) {
            const set = (dataByte & mask) != 0
            const value = (set == inverted) ? HGR_BLACK_RGB : HGR_WHITE_RGB
            colorBuffer[dstIndex++] = value
            if (isWideText) {
              colorBuffer[dstIndex++] = value
            }
            mask <<= 1
          }
          dstOffset += this.displaySize.width
        }
      }
      frameOffset += srcBitmap.stride
      colorOffset += this.displaySize.width * this.pixelScale.y / 2
    }
  }

  public deinterleaveFrame(data: Uint8Array): PixelData {
    const pixelData = this.createFramePixelData()
    deinterleave40(data, pixelData, TextLoresInterleave)
    return pixelData
  }
}

//------------------------------------------------------------------------------

class TextBitmap extends Bitmap {

  public constructor(src: Bitmap | Rect, format?: DisplayFormat) {
    super(src, format)
  }

  public encode(): PixelData {
    const dstByteWidth = this.width
    const data = new Uint8Array(this.height * dstByteWidth)
    const pixelData = new PixelData(this.format.name, this.bounds, dstByteWidth, data)
    let srcOffset = 0
    let dstOffset = 0
    for (let y = 0; y < this.height; y += 1) {
      for (let x = 0; x < this.width; x += 1) {
        pixelData.bytes[dstOffset + x] = this.data[srcOffset + x]
      }
      srcOffset += this.stride
      dstOffset += dstByteWidth
    }
    return pixelData
  }

  public decode(pixelData: PixelData): void {
    let srcOffset = 0
    let dstOffset = 0
    for (let y = 0; y < this.height; y += 1) {
      for (let x = 0; x < pixelData.byteWidth; x += 1) {
        this.data[dstOffset + x] = pixelData.bytes[srcOffset + x]
      }
      srcOffset += pixelData.byteWidth
      dstOffset += this.stride
    }
  }

  public togglePixel(pt: Point, foreColor: number, backColor: number, foreMatch?: boolean): boolean {
    if (pt.x < 0 || pt.y < 0 || pt.x >= this.width || pt.y >= this.height) {
      return false
    }
    const offset = pt.y * this.stride + pt.x
    if (foreMatch == undefined) {
      foreMatch = this.data[offset] == 0x4E
    }
    this.data[offset] = foreMatch ? 0xA0 : 0x4E
    return foreMatch
  }
}

//------------------------------------------------------------------------------

export class Text80Format extends Text40Format {

  public get name(): string {
    return "text80"
  }

  public get frameSize(): Size {
    return { width: 80, height: 24 }
  }

  public get displaySize(): Size {
    return { width: 560, height: 384 }
  }

  public get pixelScale(): Point {
    return { x: 7, y: 16 }
  }

  public calcAddress(x: number, y: number, pageIndex: number): number {
    return ((x & 1) ? 0x0400 : 0x10400) + pageIndex * 0x0400 + TextLoresInterleave[y] + Math.floor(x / 2)
  }

  public calcByteColumn(pixelX: number): number {
    return Math.floor(pixelX / 2)
  }

  public deinterleaveFrame(data: Uint8Array): PixelData {
    const pixelData = this.createFramePixelData()
    deinterleave80(data, pixelData, TextLoresInterleave)
    return pixelData
  }
}

//------------------------------------------------------------------------------

export abstract class Font {
  public static create(name: string): Font {
    if (name == "naja") {
      return new NajaFont()
    } else {
      return new AppleIIeFont()
    }
  }

  public abstract get charSize(): Size
  public abstract get charSpacing(): Size
  public abstract get startMask(): number
  public abstract get endMask(): number
  public abstract getCharBits(asciiCode: number): number[] | undefined
}

//------------------------------------------------------------------------------

// APPLE IIe - VIDEO ENHANCED - 342-0265 - A - 2732.bin

export const A2CharacterRomIIe = [
  0x1C,0x22,0x2A,0x3A,0x1A,0x02,0x3C,0x00,
  0x08,0x14,0x22,0x22,0x3E,0x22,0x22,0x00,
  0x1E,0x22,0x22,0x1E,0x22,0x22,0x1E,0x00,
  0x1C,0x22,0x02,0x02,0x02,0x22,0x1C,0x00,
  0x1E,0x22,0x22,0x22,0x22,0x22,0x1E,0x00,
  0x3E,0x02,0x02,0x1E,0x02,0x02,0x3E,0x00,
  0x3E,0x02,0x02,0x1E,0x02,0x02,0x02,0x00,
  0x3C,0x02,0x02,0x02,0x32,0x22,0x3C,0x00,
  0x22,0x22,0x22,0x3E,0x22,0x22,0x22,0x00,
  0x1C,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,
  0x20,0x20,0x20,0x20,0x20,0x22,0x1C,0x00,
  0x22,0x12,0x0A,0x06,0x0A,0x12,0x22,0x00,
  0x02,0x02,0x02,0x02,0x02,0x02,0x3E,0x00,
  0x22,0x36,0x2A,0x2A,0x22,0x22,0x22,0x00,
  0x22,0x22,0x26,0x2A,0x32,0x22,0x22,0x00,
  0x1C,0x22,0x22,0x22,0x22,0x22,0x1C,0x00,
  0x1E,0x22,0x22,0x1E,0x02,0x02,0x02,0x00,
  0x1C,0x22,0x22,0x22,0x2A,0x12,0x2C,0x00,
  0x1E,0x22,0x22,0x1E,0x0A,0x12,0x22,0x00,
  0x1C,0x22,0x02,0x1C,0x20,0x22,0x1C,0x00,
  0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x00,
  0x22,0x22,0x22,0x22,0x22,0x22,0x1C,0x00,
  0x22,0x22,0x22,0x22,0x22,0x14,0x08,0x00,
  0x22,0x22,0x22,0x2A,0x2A,0x36,0x22,0x00,
  0x22,0x22,0x14,0x08,0x14,0x22,0x22,0x00,
  0x22,0x22,0x14,0x08,0x08,0x08,0x08,0x00,
  0x3E,0x20,0x10,0x08,0x04,0x02,0x3E,0x00,
  0x3E,0x06,0x06,0x06,0x06,0x06,0x3E,0x00,
  0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00,
  0x3E,0x30,0x30,0x30,0x30,0x30,0x3E,0x00,
  0x00,0x00,0x08,0x14,0x22,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x08,0x08,0x08,0x08,0x08,0x00,0x08,0x00,
  0x14,0x14,0x14,0x00,0x00,0x00,0x00,0x00,
  0x14,0x14,0x3E,0x14,0x3E,0x14,0x14,0x00,
  0x08,0x3C,0x0A,0x1C,0x28,0x1E,0x08,0x00,
  0x06,0x26,0x10,0x08,0x04,0x32,0x30,0x00,
  0x04,0x0A,0x0A,0x04,0x2A,0x12,0x2C,0x00,
  0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,
  0x08,0x04,0x02,0x02,0x02,0x04,0x08,0x00,
  0x08,0x10,0x20,0x20,0x20,0x10,0x08,0x00,
  0x08,0x2A,0x1C,0x08,0x1C,0x2A,0x08,0x00,
  0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00,
  0x00,0x00,0x00,0x00,0x08,0x08,0x04,0x00,
  0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,
  0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00,
  0x1C,0x22,0x32,0x2A,0x26,0x22,0x1C,0x00,
  0x08,0x0C,0x08,0x08,0x08,0x08,0x1C,0x00,
  0x1C,0x22,0x20,0x18,0x04,0x02,0x3E,0x00,
  0x3E,0x20,0x10,0x18,0x20,0x22,0x1C,0x00,
  0x10,0x18,0x14,0x12,0x3E,0x10,0x10,0x00,
  0x3E,0x02,0x1E,0x20,0x20,0x22,0x1C,0x00,
  0x38,0x04,0x02,0x1E,0x22,0x22,0x1C,0x00,
  0x3E,0x20,0x10,0x08,0x04,0x04,0x04,0x00,
  0x1C,0x22,0x22,0x1C,0x22,0x22,0x1C,0x00,
  0x1C,0x22,0x22,0x3C,0x20,0x10,0x0E,0x00,
  0x00,0x00,0x08,0x00,0x08,0x00,0x00,0x00,
  0x00,0x00,0x08,0x00,0x08,0x08,0x04,0x00,
  0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x00,
  0x00,0x00,0x3E,0x00,0x3E,0x00,0x00,0x00,
  0x04,0x08,0x10,0x20,0x10,0x08,0x04,0x00,
  0x1C,0x22,0x10,0x08,0x08,0x00,0x08,0x00,
  0xEF,0xF7,0xC9,0x80,0xC0,0xC0,0x81,0xC9,
  0xEF,0xF7,0xC9,0xBE,0xDE,0xDE,0xB5,0xC9,
  0xFF,0xFF,0xFD,0xF9,0xF1,0xE1,0xC9,0xBD,
  0x80,0xDD,0xEB,0xF7,0xF7,0xEB,0xD5,0x80,
  0xFF,0xBF,0xDF,0xEE,0xF5,0xFB,0xFB,0xFF,
  0x80,0xC0,0xA0,0x93,0x8A,0x84,0x84,0x80,
  0x8F,0x9F,0x81,0xCE,0x86,0xCF,0xC0,0xFD,
  0xFF,0xE7,0xF8,0xFF,0xF8,0xF3,0xF7,0x8F,
  0xF7,0xFB,0xFD,0x80,0xFD,0xFB,0xF7,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xD5,
  0xF7,0xF7,0xF7,0xF7,0xB6,0xD5,0xE3,0xF7,
  0xF7,0xE3,0xD5,0xB6,0xF7,0xF7,0xF7,0xF7,
  0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xBF,0xBF,0xBF,0xBB,0xB9,0x80,0xF9,0xFB,
  0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,
  0xEC,0xE7,0xE3,0x81,0xE3,0xE7,0xEF,0x90,
  0x9B,0xF3,0xE3,0xC0,0xE3,0xF3,0xFB,0x84,
  0xBF,0xB7,0xF7,0x80,0xC1,0xE3,0xB7,0xBF,
  0xBF,0xB7,0xE3,0xC1,0x80,0xF7,0xB7,0xBF,
  0xFF,0xFF,0xFF,0x80,0xFF,0xFF,0xFF,0xFF,
  0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0x80,
  0xF7,0xEF,0xDF,0x80,0xDF,0xEF,0xF7,0xFF,
  0xD5,0xAA,0xD5,0xAA,0xD5,0xAA,0xD5,0xAA,
  0xAA,0xD5,0xAA,0xD5,0xAA,0xD5,0xAA,0xD5,
  0xFF,0xC1,0xBE,0xFE,0xFE,0xFE,0x80,0xFF,
  0xFF,0xFF,0xC0,0xBF,0xBF,0xBF,0x80,0xFF,
  0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,
  0xF7,0xE3,0xC1,0x80,0xC1,0xE3,0xF7,0xFF,
  0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,
  0xEB,0xEB,0x88,0xFF,0x88,0xEB,0xEB,0xFF,
  0x80,0xBF,0xBF,0xB3,0xB3,0xBF,0xBF,0x80,
  0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,
  0x04,0x08,0x10,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1C,0x20,0x3C,0x22,0x3C,0x00,
  0x02,0x02,0x1E,0x22,0x22,0x22,0x1E,0x00,
  0x00,0x00,0x3C,0x02,0x02,0x02,0x3C,0x00,
  0x20,0x20,0x3C,0x22,0x22,0x22,0x3C,0x00,
  0x00,0x00,0x1C,0x22,0x3E,0x02,0x3C,0x00,
  0x18,0x24,0x04,0x1E,0x04,0x04,0x04,0x00,
  0x00,0x00,0x1C,0x22,0x22,0x3C,0x20,0x1C,
  0x02,0x02,0x1E,0x22,0x22,0x22,0x22,0x00,
  0x08,0x00,0x0C,0x08,0x08,0x08,0x1C,0x00,
  0x10,0x00,0x18,0x10,0x10,0x10,0x12,0x0C,
  0x02,0x02,0x22,0x12,0x0E,0x12,0x22,0x00,
  0x0C,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,
  0x00,0x00,0x36,0x2A,0x2A,0x2A,0x22,0x00,
  0x00,0x00,0x1E,0x22,0x22,0x22,0x22,0x00,
  0x00,0x00,0x1C,0x22,0x22,0x22,0x1C,0x00,
  0x00,0x00,0x1E,0x22,0x22,0x1E,0x02,0x02,
  0x00,0x00,0x3C,0x22,0x22,0x3C,0x20,0x20,
  0x00,0x00,0x3A,0x06,0x02,0x02,0x02,0x00,
  0x00,0x00,0x3C,0x02,0x1C,0x20,0x1E,0x00,
  0x04,0x04,0x1E,0x04,0x04,0x24,0x18,0x00,
  0x00,0x00,0x22,0x22,0x22,0x32,0x2C,0x00,
  0x00,0x00,0x22,0x22,0x22,0x14,0x08,0x00,
  0x00,0x00,0x22,0x22,0x2A,0x2A,0x36,0x00,
  0x00,0x00,0x22,0x14,0x08,0x14,0x22,0x00,
  0x00,0x00,0x22,0x22,0x22,0x3C,0x20,0x1C,
  0x00,0x00,0x3E,0x10,0x08,0x04,0x3E,0x00,
  0x38,0x0C,0x0C,0x06,0x0C,0x0C,0x38,0x00,
  0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
  0x0E,0x18,0x18,0x30,0x18,0x18,0x0E,0x00,
  0x2C,0x1A,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x2A,0x14,0x2A,0x14,0x2A,0x00,0x00,
  0xE3,0xDD,0xD5,0xC5,0xE5,0xFD,0xC3,0xFF,
  0xF7,0xEB,0xDD,0xDD,0xC1,0xDD,0xDD,0xFF,
  0xE1,0xDD,0xDD,0xE1,0xDD,0xDD,0xE1,0xFF,
  0xE3,0xDD,0xFD,0xFD,0xFD,0xDD,0xE3,0xFF,
  0xE1,0xDD,0xDD,0xDD,0xDD,0xDD,0xE1,0xFF,
  0xC1,0xFD,0xFD,0xE1,0xFD,0xFD,0xC1,0xFF,
  0xC1,0xFD,0xFD,0xE1,0xFD,0xFD,0xFD,0xFF,
  0xC3,0xFD,0xFD,0xFD,0xCD,0xDD,0xC3,0xFF,
  0xDD,0xDD,0xDD,0xC1,0xDD,0xDD,0xDD,0xFF,
  0xE3,0xF7,0xF7,0xF7,0xF7,0xF7,0xE3,0xFF,
  0xDF,0xDF,0xDF,0xDF,0xDF,0xDD,0xE3,0xFF,
  0xDD,0xED,0xF5,0xF9,0xF5,0xED,0xDD,0xFF,
  0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xC1,0xFF,
  0xDD,0xC9,0xD5,0xD5,0xDD,0xDD,0xDD,0xFF,
  0xDD,0xDD,0xD9,0xD5,0xCD,0xDD,0xDD,0xFF,
  0xE3,0xDD,0xDD,0xDD,0xDD,0xDD,0xE3,0xFF,
  0xE1,0xDD,0xDD,0xE1,0xFD,0xFD,0xFD,0xFF,
  0xE3,0xDD,0xDD,0xDD,0xD5,0xED,0xD3,0xFF,
  0xE1,0xDD,0xDD,0xE1,0xF5,0xED,0xDD,0xFF,
  0xE3,0xDD,0xFD,0xE3,0xDF,0xDD,0xE3,0xFF,
  0xC1,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0xFF,
  0xDD,0xDD,0xDD,0xDD,0xDD,0xDD,0xE3,0xFF,
  0xDD,0xDD,0xDD,0xDD,0xDD,0xEB,0xF7,0xFF,
  0xDD,0xDD,0xDD,0xD5,0xD5,0xC9,0xDD,0xFF,
  0xDD,0xDD,0xEB,0xF7,0xEB,0xDD,0xDD,0xFF,
  0xDD,0xDD,0xEB,0xF7,0xF7,0xF7,0xF7,0xFF,
  0xC1,0xDF,0xEF,0xF7,0xFB,0xFD,0xC1,0xFF,
  0xC1,0xF9,0xF9,0xF9,0xF9,0xF9,0xC1,0xFF,
  0xFF,0xFD,0xFB,0xF7,0xEF,0xDF,0xFF,0xFF,
  0xC1,0xCF,0xCF,0xCF,0xCF,0xCF,0xC1,0xFF,
  0xFF,0xFF,0xF7,0xEB,0xDD,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xF7,0xF7,0xF7,0xF7,0xF7,0xFF,0xF7,0xFF,
  0xEB,0xEB,0xEB,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xEB,0xEB,0xC1,0xEB,0xC1,0xEB,0xEB,0xFF,
  0xF7,0xC3,0xF5,0xE3,0xD7,0xE1,0xF7,0xFF,
  0xF9,0xD9,0xEF,0xF7,0xFB,0xCD,0xCF,0xFF,
  0xFB,0xF5,0xF5,0xFB,0xD5,0xED,0xD3,0xFF,
  0xF7,0xF7,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xF7,0xFB,0xFD,0xFD,0xFD,0xFB,0xF7,0xFF,
  0xF7,0xEF,0xDF,0xDF,0xDF,0xEF,0xF7,0xFF,
  0xF7,0xD5,0xE3,0xF7,0xE3,0xD5,0xF7,0xFF,
  0xFF,0xF7,0xF7,0xC1,0xF7,0xF7,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xF7,0xF7,0xFB,0xFF,
  0xFF,0xFF,0xFF,0xC1,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xFF,
  0xFF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFF,0xFF,
  0xE3,0xDD,0xCD,0xD5,0xD9,0xDD,0xE3,0xFF,
  0xF7,0xF3,0xF7,0xF7,0xF7,0xF7,0xE3,0xFF,
  0xE3,0xDD,0xDF,0xE7,0xFB,0xFD,0xC1,0xFF,
  0xC1,0xDF,0xEF,0xE7,0xDF,0xDD,0xE3,0xFF,
  0xEF,0xE7,0xEB,0xED,0xC1,0xEF,0xEF,0xFF,
  0xC1,0xFD,0xE1,0xDF,0xDF,0xDD,0xE3,0xFF,
  0xC7,0xFB,0xFD,0xE1,0xDD,0xDD,0xE3,0xFF,
  0xC1,0xDF,0xEF,0xF7,0xFB,0xFB,0xFB,0xFF,
  0xE3,0xDD,0xDD,0xE3,0xDD,0xDD,0xE3,0xFF,
  0xE3,0xDD,0xDD,0xC3,0xDF,0xEF,0xF1,0xFF,
  0xFF,0xFF,0xF7,0xFF,0xF7,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xF7,0xFF,0xF7,0xF7,0xFB,0xFF,
  0xEF,0xF7,0xFB,0xFD,0xFB,0xF7,0xEF,0xFF,
  0xFF,0xFF,0xC1,0xFF,0xC1,0xFF,0xFF,0xFF,
  0xFB,0xF7,0xEF,0xDF,0xEF,0xF7,0xFB,0xFF,
  0xE3,0xDD,0xEF,0xF7,0xF7,0xFF,0xF7,0xFF,
  0xE3,0xDD,0xD5,0xC5,0xE5,0xFD,0xC3,0xFF,
  0xF7,0xEB,0xDD,0xDD,0xC1,0xDD,0xDD,0xFF,
  0xE1,0xDD,0xDD,0xE1,0xDD,0xDD,0xE1,0xFF,
  0xE3,0xDD,0xFD,0xFD,0xFD,0xDD,0xE3,0xFF,
  0xE1,0xDD,0xDD,0xDD,0xDD,0xDD,0xE1,0xFF,
  0xC1,0xFD,0xFD,0xE1,0xFD,0xFD,0xC1,0xFF,
  0xC1,0xFD,0xFD,0xE1,0xFD,0xFD,0xFD,0xFF,
  0xC3,0xFD,0xFD,0xFD,0xCD,0xDD,0xC3,0xFF,
  0xDD,0xDD,0xDD,0xC1,0xDD,0xDD,0xDD,0xFF,
  0xE3,0xF7,0xF7,0xF7,0xF7,0xF7,0xE3,0xFF,
  0xDF,0xDF,0xDF,0xDF,0xDF,0xDD,0xE3,0xFF,
  0xDD,0xED,0xF5,0xF9,0xF5,0xED,0xDD,0xFF,
  0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xC1,0xFF,
  0xDD,0xC9,0xD5,0xD5,0xDD,0xDD,0xDD,0xFF,
  0xDD,0xDD,0xD9,0xD5,0xCD,0xDD,0xDD,0xFF,
  0xE3,0xDD,0xDD,0xDD,0xDD,0xDD,0xE3,0xFF,
  0xE1,0xDD,0xDD,0xE1,0xFD,0xFD,0xFD,0xFF,
  0xE3,0xDD,0xDD,0xDD,0xD5,0xED,0xD3,0xFF,
  0xE1,0xDD,0xDD,0xE1,0xF5,0xED,0xDD,0xFF,
  0xE3,0xDD,0xFD,0xE3,0xDF,0xDD,0xE3,0xFF,
  0xC1,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0xFF,
  0xDD,0xDD,0xDD,0xDD,0xDD,0xDD,0xE3,0xFF,
  0xDD,0xDD,0xDD,0xDD,0xDD,0xEB,0xF7,0xFF,
  0xDD,0xDD,0xDD,0xD5,0xD5,0xC9,0xDD,0xFF,
  0xDD,0xDD,0xEB,0xF7,0xEB,0xDD,0xDD,0xFF,
  0xDD,0xDD,0xEB,0xF7,0xF7,0xF7,0xF7,0xFF,
  0xC1,0xDF,0xEF,0xF7,0xFB,0xFD,0xC1,0xFF,
  0xC1,0xF9,0xF9,0xF9,0xF9,0xF9,0xC1,0xFF,
  0xFF,0xFD,0xFB,0xF7,0xEF,0xDF,0xFF,0xFF,
  0xC1,0xCF,0xCF,0xCF,0xCF,0xCF,0xC1,0xFF,
  0xFF,0xFF,0xF7,0xEB,0xDD,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,
  0xFB,0xF7,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xFF,0xE3,0xDF,0xC3,0xDD,0xC3,0xFF,
  0xFD,0xFD,0xE1,0xDD,0xDD,0xDD,0xE1,0xFF,
  0xFF,0xFF,0xC3,0xFD,0xFD,0xFD,0xC3,0xFF,
  0xDF,0xDF,0xC3,0xDD,0xDD,0xDD,0xC3,0xFF,
  0xFF,0xFF,0xE3,0xDD,0xC1,0xFD,0xC3,0xFF,
  0xE7,0xDB,0xFB,0xE1,0xFB,0xFB,0xFB,0xFF,
  0xFF,0xFF,0xE3,0xDD,0xDD,0xC3,0xDF,0xE3,
  0xFD,0xFD,0xE1,0xDD,0xDD,0xDD,0xDD,0xFF,
  0xF7,0xFF,0xF3,0xF7,0xF7,0xF7,0xE3,0xFF,
  0xEF,0xFF,0xE7,0xEF,0xEF,0xEF,0xED,0xF3,
  0xFD,0xFD,0xDD,0xED,0xF1,0xED,0xDD,0xFF,
  0xF3,0xF7,0xF7,0xF7,0xF7,0xF7,0xE3,0xFF,
  0xFF,0xFF,0xC9,0xD5,0xD5,0xD5,0xDD,0xFF,
  0xFF,0xFF,0xE1,0xDD,0xDD,0xDD,0xDD,0xFF,
  0xFF,0xFF,0xE3,0xDD,0xDD,0xDD,0xE3,0xFF,
  0xFF,0xFF,0xE1,0xDD,0xDD,0xE1,0xFD,0xFD,
  0xFF,0xFF,0xC3,0xDD,0xDD,0xC3,0xDF,0xDF,
  0xFF,0xFF,0xC5,0xF9,0xFD,0xFD,0xFD,0xFF,
  0xFF,0xFF,0xC3,0xFD,0xE3,0xDF,0xE1,0xFF,
  0xFB,0xFB,0xE1,0xFB,0xFB,0xDB,0xE7,0xFF,
  0xFF,0xFF,0xDD,0xDD,0xDD,0xCD,0xD3,0xFF,
  0xFF,0xFF,0xDD,0xDD,0xDD,0xEB,0xF7,0xFF,
  0xFF,0xFF,0xDD,0xDD,0xD5,0xD5,0xC9,0xFF,
  0xFF,0xFF,0xDD,0xEB,0xF7,0xEB,0xDD,0xFF,
  0xFF,0xFF,0xDD,0xDD,0xDD,0xC3,0xDF,0xE3,
  0xFF,0xFF,0xC1,0xEF,0xF7,0xFB,0xC1,0xFF,
  0xC7,0xF3,0xF3,0xF9,0xF3,0xF3,0xC7,0xFF,
  0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,0xF7,
  0xF1,0xE7,0xE7,0xCF,0xE7,0xE7,0xF1,0xFF,
  0xD3,0xE5,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFF,0xD5,0xEB,0xD5,0xEB,0xD5,0xFF,0xFF,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
  0xFE,0xFE,0xEE,0xBB,0xFE,0xFE,0xFF,0xFF,
  0xFD,0xFD,0xDD,0x77,0xFD,0xFD,0xFF,0xFF,
  0xFC,0xFC,0xCC,0x33,0xFC,0xFC,0xFF,0xFF,
  0xFB,0xFB,0xBB,0xEE,0xFB,0xFB,0xFF,0xFF,
  0xFA,0xFA,0xAA,0xAA,0xFA,0xFA,0xFF,0xFF,
  0xF9,0xF9,0x99,0x66,0xF9,0xF9,0xFF,0xFF,
  0xF8,0xF8,0x88,0x22,0xF8,0xF8,0xFF,0xFF,
  0xF7,0xF7,0x77,0xDD,0xF7,0xF7,0xFF,0xFF,
  0xF6,0xF6,0x66,0x99,0xF6,0xF6,0xFF,0xFF,
  0xF5,0xF5,0x55,0x55,0xF5,0xF5,0xFF,0xFF,
  0xF4,0xF4,0x44,0x11,0xF4,0xF4,0xFF,0xFF,
  0xF3,0xF3,0x33,0xCC,0xF3,0xF3,0xFF,0xFF,
  0xF2,0xF2,0x22,0x88,0xF2,0xF2,0xFF,0xFF,
  0xF1,0xF1,0x11,0x44,0xF1,0xF1,0xFF,0xFF,
  0xF0,0xF0,0x00,0x00,0xF0,0xF0,0xFF,0xFF,
  0xEF,0xEF,0xFF,0xFF,0xEF,0xEF,0xEE,0xBB,
  0xEE,0xEE,0xEE,0xBB,0xEE,0xEE,0xEE,0xBB,
  0xED,0xED,0xDD,0x77,0xED,0xED,0xEE,0xBB,
  0xEC,0xEC,0xCC,0x33,0xEC,0xEC,0xEE,0xBB,
  0xEB,0xEB,0xBB,0xEE,0xEB,0xEB,0xEE,0xBB,
  0xEA,0xEA,0xAA,0xAA,0xEA,0xEA,0xEE,0xBB,
  0xE9,0xE9,0x99,0x66,0xE9,0xE9,0xEE,0xBB,
  0xE8,0xE8,0x88,0x22,0xE8,0xE8,0xEE,0xBB,
  0xE7,0xE7,0x77,0xDD,0xE7,0xE7,0xEE,0xBB,
  0xE6,0xE6,0x66,0x99,0xE6,0xE6,0xEE,0xBB,
  0xE5,0xE5,0x55,0x55,0xE5,0xE5,0xEE,0xBB,
  0xE4,0xE4,0x44,0x11,0xE4,0xE4,0xEE,0xBB,
  0xE3,0xE3,0x33,0xCC,0xE3,0xE3,0xEE,0xBB,
  0xE2,0xE2,0x22,0x88,0xE2,0xE2,0xEE,0xBB,
  0xE1,0xE1,0x11,0x44,0xE1,0xE1,0xEE,0xBB,
  0xE0,0xE0,0x00,0x00,0xE0,0xE0,0xEE,0xBB,
  0xDF,0xDF,0xFF,0xFF,0xDF,0xDF,0xDD,0x77,
  0xDE,0xDE,0xEE,0xBB,0xDE,0xDE,0xDD,0x77,
  0xDD,0xDD,0xDD,0x77,0xDD,0xDD,0xDD,0x77,
  0xDC,0xDC,0xCC,0x33,0xDC,0xDC,0xDD,0x77,
  0xDB,0xDB,0xBB,0xEE,0xDB,0xDB,0xDD,0x77,
  0xDA,0xDA,0xAA,0xAA,0xDA,0xDA,0xDD,0x77,
  0xD9,0xD9,0x99,0x66,0xD9,0xD9,0xDD,0x77,
  0xD8,0xD8,0x88,0x22,0xD8,0xD8,0xDD,0x77,
  0xD7,0xD7,0x77,0xDD,0xD7,0xD7,0xDD,0x77,
  0xD6,0xD6,0x66,0x99,0xD6,0xD6,0xDD,0x77,
  0xD5,0xD5,0x55,0x55,0xD5,0xD5,0xDD,0x77,
  0xD4,0xD4,0x44,0x11,0xD4,0xD4,0xDD,0x77,
  0xD3,0xD3,0x33,0xCC,0xD3,0xD3,0xDD,0x77,
  0xD2,0xD2,0x22,0x88,0xD2,0xD2,0xDD,0x77,
  0xD1,0xD1,0x11,0x44,0xD1,0xD1,0xDD,0x77,
  0xD0,0xD0,0x00,0x00,0xD0,0xD0,0xDD,0x77,
  0xCF,0xCF,0xFF,0xFF,0xCF,0xCF,0xCC,0x33,
  0xCE,0xCE,0xEE,0xBB,0xCE,0xCE,0xCC,0x33,
  0xCD,0xCD,0xDD,0x77,0xCD,0xCD,0xCC,0x33,
  0xCC,0xCC,0xCC,0x33,0xCC,0xCC,0xCC,0x33,
  0xCB,0xCB,0xBB,0xEE,0xCB,0xCB,0xCC,0x33,
  0xCA,0xCA,0xAA,0xAA,0xCA,0xCA,0xCC,0x33,
  0xC9,0xC9,0x99,0x66,0xC9,0xC9,0xCC,0x33,
  0xC8,0xC8,0x88,0x22,0xC8,0xC8,0xCC,0x33,
  0xC7,0xC7,0x77,0xDD,0xC7,0xC7,0xCC,0x33,
  0xC6,0xC6,0x66,0x99,0xC6,0xC6,0xCC,0x33,
  0xC5,0xC5,0x55,0x55,0xC5,0xC5,0xCC,0x33,
  0xC4,0xC4,0x44,0x11,0xC4,0xC4,0xCC,0x33,
  0xC3,0xC3,0x33,0xCC,0xC3,0xC3,0xCC,0x33,
  0xC2,0xC2,0x22,0x88,0xC2,0xC2,0xCC,0x33,
  0xC1,0xC1,0x11,0x44,0xC1,0xC1,0xCC,0x33,
  0xC0,0xC0,0x00,0x00,0xC0,0xC0,0xCC,0x33,
  0xBF,0xBF,0xFF,0xFF,0xBF,0xBF,0xBB,0xEE,
  0xBE,0xBE,0xEE,0xBB,0xBE,0xBE,0xBB,0xEE,
  0xBD,0xBD,0xDD,0x77,0xBD,0xBD,0xBB,0xEE,
  0xBC,0xBC,0xCC,0x33,0xBC,0xBC,0xBB,0xEE,
  0xBB,0xBB,0xBB,0xEE,0xBB,0xBB,0xBB,0xEE,
  0xBA,0xBA,0xAA,0xAA,0xBA,0xBA,0xBB,0xEE,
  0xB9,0xB9,0x99,0x66,0xB9,0xB9,0xBB,0xEE,
  0xB8,0xB8,0x88,0x22,0xB8,0xB8,0xBB,0xEE,
  0xB7,0xB7,0x77,0xDD,0xB7,0xB7,0xBB,0xEE,
  0xB6,0xB6,0x66,0x99,0xB6,0xB6,0xBB,0xEE,
  0xB5,0xB5,0x55,0x55,0xB5,0xB5,0xBB,0xEE,
  0xB4,0xB4,0x44,0x11,0xB4,0xB4,0xBB,0xEE,
  0xB3,0xB3,0x33,0xCC,0xB3,0xB3,0xBB,0xEE,
  0xB2,0xB2,0x22,0x88,0xB2,0xB2,0xBB,0xEE,
  0xB1,0xB1,0x11,0x44,0xB1,0xB1,0xBB,0xEE,
  0xB0,0xB0,0x00,0x00,0xB0,0xB0,0xBB,0xEE,
  0xAF,0xAF,0xFF,0xFF,0xAF,0xAF,0xAA,0xAA,
  0xAE,0xAE,0xEE,0xBB,0xAE,0xAE,0xAA,0xAA,
  0xAD,0xAD,0xDD,0x77,0xAD,0xAD,0xAA,0xAA,
  0xAC,0xAC,0xCC,0x33,0xAC,0xAC,0xAA,0xAA,
  0xAB,0xAB,0xBB,0xEE,0xAB,0xAB,0xAA,0xAA,
  0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
  0xA9,0xA9,0x99,0x66,0xA9,0xA9,0xAA,0xAA,
  0xA8,0xA8,0x88,0x22,0xA8,0xA8,0xAA,0xAA,
  0xA7,0xA7,0x77,0xDD,0xA7,0xA7,0xAA,0xAA,
  0xA6,0xA6,0x66,0x99,0xA6,0xA6,0xAA,0xAA,
  0xA5,0xA5,0x55,0x55,0xA5,0xA5,0xAA,0xAA,
  0xA4,0xA4,0x44,0x11,0xA4,0xA4,0xAA,0xAA,
  0xA3,0xA3,0x33,0xCC,0xA3,0xA3,0xAA,0xAA,
  0xA2,0xA2,0x22,0x88,0xA2,0xA2,0xAA,0xAA,
  0xA1,0xA1,0x11,0x44,0xA1,0xA1,0xAA,0xAA,
  0xA0,0xA0,0x00,0x00,0xA0,0xA0,0xAA,0xAA,
  0x9F,0x9F,0xFF,0xFF,0x9F,0x9F,0x99,0x66,
  0x9E,0x9E,0xEE,0xBB,0x9E,0x9E,0x99,0x66,
  0x9D,0x9D,0xDD,0x77,0x9D,0x9D,0x99,0x66,
  0x9C,0x9C,0xCC,0x33,0x9C,0x9C,0x99,0x66,
  0x9B,0x9B,0xBB,0xEE,0x9B,0x9B,0x99,0x66,
  0x9A,0x9A,0xAA,0xAA,0x9A,0x9A,0x99,0x66,
  0x99,0x99,0x99,0x66,0x99,0x99,0x99,0x66,
  0x98,0x98,0x88,0x22,0x98,0x98,0x99,0x66,
  0x97,0x97,0x77,0xDD,0x97,0x97,0x99,0x66,
  0x96,0x96,0x66,0x99,0x96,0x96,0x99,0x66,
  0x95,0x95,0x55,0x55,0x95,0x95,0x99,0x66,
  0x94,0x94,0x44,0x11,0x94,0x94,0x99,0x66,
  0x93,0x93,0x33,0xCC,0x93,0x93,0x99,0x66,
  0x92,0x92,0x22,0x88,0x92,0x92,0x99,0x66,
  0x91,0x91,0x11,0x44,0x91,0x91,0x99,0x66,
  0x90,0x90,0x00,0x00,0x90,0x90,0x99,0x66,
  0x8F,0x8F,0xFF,0xFF,0x8F,0x8F,0x88,0x22,
  0x8E,0x8E,0xEE,0xBB,0x8E,0x8E,0x88,0x22,
  0x8D,0x8D,0xDD,0x77,0x8D,0x8D,0x88,0x22,
  0x8C,0x8C,0xCC,0x33,0x8C,0x8C,0x88,0x22,
  0x8B,0x8B,0xBB,0xEE,0x8B,0x8B,0x88,0x22,
  0x8A,0x8A,0xAA,0xAA,0x8A,0x8A,0x88,0x22,
  0x89,0x89,0x99,0x66,0x89,0x89,0x88,0x22,
  0x88,0x88,0x88,0x22,0x88,0x88,0x88,0x22,
  0x87,0x87,0x77,0xDD,0x87,0x87,0x88,0x22,
  0x86,0x86,0x66,0x99,0x86,0x86,0x88,0x22,
  0x85,0x85,0x55,0x55,0x85,0x85,0x88,0x22,
  0x84,0x84,0x44,0x11,0x84,0x84,0x88,0x22,
  0x83,0x83,0x33,0xCC,0x83,0x83,0x88,0x22,
  0x82,0x82,0x22,0x88,0x82,0x82,0x88,0x22,
  0x81,0x81,0x11,0x44,0x81,0x81,0x88,0x22,
  0x80,0x80,0x00,0x00,0x80,0x80,0x88,0x22,
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x77,0xDD,
  0xFE,0xFE,0xEE,0xBB,0xFE,0xFE,0x77,0xDD,
  0xFD,0xFD,0xDD,0x77,0xFD,0xFD,0x77,0xDD,
  0xFC,0xFC,0xCC,0x33,0xFC,0xFC,0x77,0xDD,
  0xFB,0xFB,0xBB,0xEE,0xFB,0xFB,0x77,0xDD,
  0xFA,0xFA,0xAA,0xAA,0xFA,0xFA,0x77,0xDD,
  0xF9,0xF9,0x99,0x66,0xF9,0xF9,0x77,0xDD,
  0xF8,0xF8,0x88,0x22,0xF8,0xF8,0x77,0xDD,
  0xF7,0xF7,0x77,0xDD,0xF7,0xF7,0x77,0xDD,
  0xF6,0xF6,0x66,0x99,0xF6,0xF6,0x77,0xDD,
  0xF5,0xF5,0x55,0x55,0xF5,0xF5,0x77,0xDD,
  0xF4,0xF4,0x44,0x11,0xF4,0xF4,0x77,0xDD,
  0xF3,0xF3,0x33,0xCC,0xF3,0xF3,0x77,0xDD,
  0xF2,0xF2,0x22,0x88,0xF2,0xF2,0x77,0xDD,
  0xF1,0xF1,0x11,0x44,0xF1,0xF1,0x77,0xDD,
  0xF0,0xF0,0x00,0x00,0xF0,0xF0,0x77,0xDD,
  0xEF,0xEF,0xFF,0xFF,0xEF,0xEF,0x66,0x99,
  0xEE,0xEE,0xEE,0xBB,0xEE,0xEE,0x66,0x99,
  0xED,0xED,0xDD,0x77,0xED,0xED,0x66,0x99,
  0xEC,0xEC,0xCC,0x33,0xEC,0xEC,0x66,0x99,
  0xEB,0xEB,0xBB,0xEE,0xEB,0xEB,0x66,0x99,
  0xEA,0xEA,0xAA,0xAA,0xEA,0xEA,0x66,0x99,
  0xE9,0xE9,0x99,0x66,0xE9,0xE9,0x66,0x99,
  0xE8,0xE8,0x88,0x22,0xE8,0xE8,0x66,0x99,
  0xE7,0xE7,0x77,0xDD,0xE7,0xE7,0x66,0x99,
  0xE6,0xE6,0x66,0x99,0xE6,0xE6,0x66,0x99,
  0xE5,0xE5,0x55,0x55,0xE5,0xE5,0x66,0x99,
  0xE4,0xE4,0x44,0x11,0xE4,0xE4,0x66,0x99,
  0xE3,0xE3,0x33,0xCC,0xE3,0xE3,0x66,0x99,
  0xE2,0xE2,0x22,0x88,0xE2,0xE2,0x66,0x99,
  0xE1,0xE1,0x11,0x44,0xE1,0xE1,0x66,0x99,
  0xE0,0xE0,0x00,0x00,0xE0,0xE0,0x66,0x99,
  0xDF,0xDF,0xFF,0xFF,0xDF,0xDF,0x55,0x55,
  0xDE,0xDE,0xEE,0xBB,0xDE,0xDE,0x55,0x55,
  0xDD,0xDD,0xDD,0x77,0xDD,0xDD,0x55,0x55,
  0xDC,0xDC,0xCC,0x33,0xDC,0xDC,0x55,0x55,
  0xDB,0xDB,0xBB,0xEE,0xDB,0xDB,0x55,0x55,
  0xDA,0xDA,0xAA,0xAA,0xDA,0xDA,0x55,0x55,
  0xD9,0xD9,0x99,0x66,0xD9,0xD9,0x55,0x55,
  0xD8,0xD8,0x88,0x22,0xD8,0xD8,0x55,0x55,
  0xD7,0xD7,0x77,0xDD,0xD7,0xD7,0x55,0x55,
  0xD6,0xD6,0x66,0x99,0xD6,0xD6,0x55,0x55,
  0xD5,0xD5,0x55,0x55,0xD5,0xD5,0x55,0x55,
  0xD4,0xD4,0x44,0x11,0xD4,0xD4,0x55,0x55,
  0xD3,0xD3,0x33,0xCC,0xD3,0xD3,0x55,0x55,
  0xD2,0xD2,0x22,0x88,0xD2,0xD2,0x55,0x55,
  0xD1,0xD1,0x11,0x44,0xD1,0xD1,0x55,0x55,
  0xD0,0xD0,0x00,0x00,0xD0,0xD0,0x55,0x55,
  0xCF,0xCF,0xFF,0xFF,0xCF,0xCF,0x44,0x11,
  0xCE,0xCE,0xEE,0xBB,0xCE,0xCE,0x44,0x11,
  0xCD,0xCD,0xDD,0x77,0xCD,0xCD,0x44,0x11,
  0xCC,0xCC,0xCC,0x33,0xCC,0xCC,0x44,0x11,
  0xCB,0xCB,0xBB,0xEE,0xCB,0xCB,0x44,0x11,
  0xCA,0xCA,0xAA,0xAA,0xCA,0xCA,0x44,0x11,
  0xC9,0xC9,0x99,0x66,0xC9,0xC9,0x44,0x11,
  0xC8,0xC8,0x88,0x22,0xC8,0xC8,0x44,0x11,
  0xC7,0xC7,0x77,0xDD,0xC7,0xC7,0x44,0x11,
  0xC6,0xC6,0x66,0x99,0xC6,0xC6,0x44,0x11,
  0xC5,0xC5,0x55,0x55,0xC5,0xC5,0x44,0x11,
  0xC4,0xC4,0x44,0x11,0xC4,0xC4,0x44,0x11,
  0xC3,0xC3,0x33,0xCC,0xC3,0xC3,0x44,0x11,
  0xC2,0xC2,0x22,0x88,0xC2,0xC2,0x44,0x11,
  0xC1,0xC1,0x11,0x44,0xC1,0xC1,0x44,0x11,
  0xC0,0xC0,0x00,0x00,0xC0,0xC0,0x44,0x11,
  0xBF,0xBF,0xFF,0xFF,0xBF,0xBF,0x33,0xCC,
  0xBE,0xBE,0xEE,0xBB,0xBE,0xBE,0x33,0xCC,
  0xBD,0xBD,0xDD,0x77,0xBD,0xBD,0x33,0xCC,
  0xBC,0xBC,0xCC,0x33,0xBC,0xBC,0x33,0xCC,
  0xBB,0xBB,0xBB,0xEE,0xBB,0xBB,0x33,0xCC,
  0xBA,0xBA,0xAA,0xAA,0xBA,0xBA,0x33,0xCC,
  0xB9,0xB9,0x99,0x66,0xB9,0xB9,0x33,0xCC,
  0xB8,0xB8,0x88,0x22,0xB8,0xB8,0x33,0xCC,
  0xB7,0xB7,0x77,0xDD,0xB7,0xB7,0x33,0xCC,
  0xB6,0xB6,0x66,0x99,0xB6,0xB6,0x33,0xCC,
  0xB5,0xB5,0x55,0x55,0xB5,0xB5,0x33,0xCC,
  0xB4,0xB4,0x44,0x11,0xB4,0xB4,0x33,0xCC,
  0xB3,0xB3,0x33,0xCC,0xB3,0xB3,0x33,0xCC,
  0xB2,0xB2,0x22,0x88,0xB2,0xB2,0x33,0xCC,
  0xB1,0xB1,0x11,0x44,0xB1,0xB1,0x33,0xCC,
  0xB0,0xB0,0x00,0x00,0xB0,0xB0,0x33,0xCC,
  0xAF,0xAF,0xFF,0xFF,0xAF,0xAF,0x22,0x88,
  0xAE,0xAE,0xEE,0xBB,0xAE,0xAE,0x22,0x88,
  0xAD,0xAD,0xDD,0x77,0xAD,0xAD,0x22,0x88,
  0xAC,0xAC,0xCC,0x33,0xAC,0xAC,0x22,0x88,
  0xAB,0xAB,0xBB,0xEE,0xAB,0xAB,0x22,0x88,
  0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x22,0x88,
  0xA9,0xA9,0x99,0x66,0xA9,0xA9,0x22,0x88,
  0xA8,0xA8,0x88,0x22,0xA8,0xA8,0x22,0x88,
  0xA7,0xA7,0x77,0xDD,0xA7,0xA7,0x22,0x88,
  0xA6,0xA6,0x66,0x99,0xA6,0xA6,0x22,0x88,
  0xA5,0xA5,0x55,0x55,0xA5,0xA5,0x22,0x88,
  0xA4,0xA4,0x44,0x11,0xA4,0xA4,0x22,0x88,
  0xA3,0xA3,0x33,0xCC,0xA3,0xA3,0x22,0x88,
  0xA2,0xA2,0x22,0x88,0xA2,0xA2,0x22,0x88,
  0xA1,0xA1,0x11,0x44,0xA1,0xA1,0x22,0x88,
  0xA0,0xA0,0x00,0x00,0xA0,0xA0,0x22,0x88,
  0x9F,0x9F,0xFF,0xFF,0x9F,0x9F,0x11,0x44,
  0x9E,0x9E,0xEE,0xBB,0x9E,0x9E,0x11,0x44,
  0x9D,0x9D,0xDD,0x77,0x9D,0x9D,0x11,0x44,
  0x9C,0x9C,0xCC,0x33,0x9C,0x9C,0x11,0x44,
  0x9B,0x9B,0xBB,0xEE,0x9B,0x9B,0x11,0x44,
  0x9A,0x9A,0xAA,0xAA,0x9A,0x9A,0x11,0x44,
  0x99,0x99,0x99,0x66,0x99,0x99,0x11,0x44,
  0x98,0x98,0x88,0x22,0x98,0x98,0x11,0x44,
  0x97,0x97,0x77,0xDD,0x97,0x97,0x11,0x44,
  0x96,0x96,0x66,0x99,0x96,0x96,0x11,0x44,
  0x95,0x95,0x55,0x55,0x95,0x95,0x11,0x44,
  0x94,0x94,0x44,0x11,0x94,0x94,0x11,0x44,
  0x93,0x93,0x33,0xCC,0x93,0x93,0x11,0x44,
  0x92,0x92,0x22,0x88,0x92,0x92,0x11,0x44,
  0x91,0x91,0x11,0x44,0x91,0x91,0x11,0x44,
  0x90,0x90,0x00,0x00,0x90,0x90,0x11,0x44,
  0x8F,0x8F,0xFF,0xFF,0x8F,0x8F,0x00,0x00,
  0x8E,0x8E,0xEE,0xBB,0x8E,0x8E,0x00,0x00,
  0x8D,0x8D,0xDD,0x77,0x8D,0x8D,0x00,0x00,
  0x8C,0x8C,0xCC,0x33,0x8C,0x8C,0x00,0x00,
  0x8B,0x8B,0xBB,0xEE,0x8B,0x8B,0x00,0x00,
  0x8A,0x8A,0xAA,0xAA,0x8A,0x8A,0x00,0x00,
  0x89,0x89,0x99,0x66,0x89,0x89,0x00,0x00,
  0x88,0x88,0x88,0x22,0x88,0x88,0x00,0x00,
  0x87,0x87,0x77,0xDD,0x87,0x87,0x00,0x00,
  0x86,0x86,0x66,0x99,0x86,0x86,0x00,0x00,
  0x85,0x85,0x55,0x55,0x85,0x85,0x00,0x00,
  0x84,0x84,0x44,0x11,0x84,0x84,0x00,0x00,
  0x83,0x83,0x33,0xCC,0x83,0x83,0x00,0x00,
  0x82,0x82,0x22,0x88,0x82,0x82,0x00,0x00,
  0x81,0x81,0x11,0x44,0x81,0x81,0x00,0x00,
  0x80,0x80,0x00,0x00,0x80,0x80,0x00,0x00,
]

export class AppleIIeFont implements Font {

  public get charSize(): Size {
    return {width: 7, height: 8}
  }

  public get charSpacing(): Size {
    return {width: 0, height: 0}
  }

  public get startMask(): number {
    return 0x01
  }

  public get endMask(): number {
    return 0x40
  }

  public getCharBits(code: number): number[] | undefined {
    code |= 0x80
    const result = A2CharacterRomIIe.slice(code * 8, code * 8 + 8)
    if (result) {
      for (let i = 0; i < result.length; i += 1) {
        result[i] ^= 0x7F
      }
    }
    return result
  }
}

//------------------------------------------------------------------------------

const NajaChars = [
  0x0E,0x1B,0x1B,0x1B,0x1B,0x1B,0x0E,   // 0
  0x0C,0x0E,0x0C,0x0C,0x0C,0x0C,0x1E,   // 1
  0x1F,0x1B,0x18,0x1F,0x03,0x03,0x1F,   // 2
  0x1F,0x18,0x18,0x0E,0x18,0x18,0x1F,   // 3
  0x1B,0x1B,0x1B,0x1F,0x18,0x18,0x18,   // 4
  0x1F,0x03,0x03,0x1F,0x18,0x1B,0x1F,   // 5
  0x1F,0x03,0x03,0x1F,0x1B,0x1B,0x1F,   // 6
  0x1F,0x18,0x18,0x18,0x18,0x18,0x18,   // 7
  0x1F,0x1B,0x1B,0x0E,0x1B,0x1B,0x1F,   // 8
  0x1F,0x1B,0x1B,0x1F,0x18,0x18,0x18,   // 9
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,   // <space>
  0x1F,0x1B,0x1B,0x1F,0x1B,0x1B,0x1B,   // A
  0x0F,0x1B,0x1B,0x0F,0x1B,0x1B,0x0F,   // B
  0x1F,0x1B,0x03,0x03,0x03,0x1B,0x1F,   // C
  0x0F,0x1B,0x1B,0x1B,0x1B,0x1B,0x0F,   // D
  0x1F,0x1B,0x03,0x0F,0x03,0x1B,0x1F,   // E
  0x1F,0x1B,0x03,0x0F,0x03,0x03,0x03,   // F
  0x1F,0x1B,0x03,0x03,0x1F,0x1B,0x1F,   // G
  0x1B,0x1B,0x1B,0x1F,0x1B,0x1B,0x1B,   // H
  0x1E,0x0C,0x0C,0x0C,0x0C,0x0C,0x1E,   // I
  0x18,0x18,0x18,0x18,0x18,0x1B,0x1F,   // J
  0x1B,0x1B,0x1B,0x0F,0x1B,0x1B,0x1B,   // K
  0x03,0x03,0x03,0x03,0x03,0x03,0x1F,   // L
  0x1B,0x1F,0x1F,0x1F,0x1B,0x1B,0x1B,   // M
  0x0F,0x1B,0x1B,0x1B,0x1B,0x1B,0x1B,   // N
  0x1F,0x1B,0x1B,0x1B,0x1B,0x1B,0x1F,   // O
  0x1F,0x1B,0x1B,0x1F,0x03,0x03,0x03,   // P
  0x1F,0x1B,0x1B,0x1B,0x1B,0x0F,0x1C,   // Q
  0x0F,0x1B,0x1B,0x0F,0x1B,0x1B,0x1B,   // R
  0x1F,0x1B,0x03,0x1F,0x18,0x1B,0x1F,   // S
  0x1F,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,   // T
  0x1B,0x1B,0x1B,0x1B,0x1B,0x1B,0x1F,   // U
  0x1B,0x1B,0x1B,0x1B,0x1B,0x0E,0x0E,   // V
  0x1B,0x1B,0x1B,0x1F,0x1F,0x1F,0x1B,   // W
  0x1B,0x1B,0x1B,0x0E,0x1B,0x1B,0x1B,   // X
  0x1B,0x1B,0x1B,0x1F,0x18,0x1B,0x1F,   // Y
  0x1F,0x18,0x1C,0x0E,0x07,0x03,0x1F,   // Z
  0x0C,0x1E,0x1E,0x0C,0x0C,0x00,0x0C,   // !
  0x1B,0x1B,0x1B,0x00,0x00,0x00,0x00,   // "
  0x1B,0x1B,0x18,0x0E,0x03,0x1B,0x1B,   // %
  0x06,0x06,0x06,0x00,0x00,0x00,0x00,   // '
  0x00,0x1B,0x0E,0x1F,0x0E,0x1B,0x00,   // *
  0x00,0x0C,0x0C,0x1F,0x0C,0x0C,0x00,   // +
  0x00,0x00,0x00,0x00,0x00,0x0C,0x06,   // ,
  0x00,0x00,0x00,0x1F,0x00,0x00,0x00,   // -
  0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,   // .
  0x00,0x00,0x18,0x0C,0x06,0x03,0x00,   // /
  0x00,0x0C,0x0C,0x00,0x0C,0x0C,0x00,   // :
  0x18,0x0C,0x06,0x03,0x06,0x0C,0x18,   // <
  0x00,0x00,0x1F,0x00,0x1F,0x00,0x00,   // =
  0x03,0x06,0x0C,0x18,0x0C,0x06,0x03,   // >
  0x1F,0x1B,0x18,0x1E,0x06,0x00,0x06,   // ?
]

export class NajaFont implements Font {

  public get charSize(): Size {
    return {width: 5, height: 7}
  }

  public get charSpacing(): Size {
    return {width: 1, height: 1}
  }

  public get startMask(): number {
    return 0x01
  }

  public get endMask(): number {
    return 0x10
  }

  public getCharBits(code: number): number[] | undefined {
    let index
    if (code >= 0x30 && code <= 0x39) {			    // 0-9
      index = code - 0x30
    } else if (code >= 0x20 && code <= 0x2F) {
      const map = [
        0x0A,         // <space>
        0x25,         // !
        0x26,         // "
        undefined,    // #
        undefined,    // $
        0x27,         // %
        undefined,    // &
        0x28,         // '
        undefined,    // (
        undefined,    // )
        0x29,         // *
        0x2A,         // +
        0x2B,         // ,
        0x2C,         // -
        0x2D,         // .
        0x2E,         // /
      ]
      index = map[code - 0x20]
    } else if (code >= 0x3A && code <= 0x3F) {
      const map = [
        0x2F,       // :
        undefined,  // ;
        0x30,       // <
        0x31,       // =
        0x32,       // >
        0x33        // ?
      ]
      index = map[code - 0x3A]
    } else if (code >= 0x41 && code <= 0x5A) {  // A-Z
      index = 0x0B + code - 0x41
    }
    if (index !== undefined) {
      return NajaChars.slice(index * 7, index * 7 + 7)
    }
  }
}

//------------------------------------------------------------------------------
